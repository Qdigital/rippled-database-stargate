//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./Hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

Hbase_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_enableTable_args.prototype = {};
Hbase_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_enableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_enableTable_result.prototype = {};
Hbase_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_disableTable_args.prototype = {};
Hbase_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_disableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_disableTable_result.prototype = {};
Hbase_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_isTableEnabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_isTableEnabled_args.prototype = {};
Hbase_isTableEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_isTableEnabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_isTableEnabled_result.prototype = {};
Hbase_isTableEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_compact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_compact_args.prototype = {};
Hbase_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_compact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_compact_result.prototype = {};
Hbase_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_majorCompact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_majorCompact_args.prototype = {};
Hbase_majorCompact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_majorCompact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_majorCompact_result.prototype = {};
Hbase_majorCompact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableNames_args = function(args) {
};
Hbase_getTableNames_args.prototype = {};
Hbase_getTableNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableNames_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getTableNames_result.prototype = {};
Hbase_getTableNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.success = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readBinary();
          this.success.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter57 in this.success)
    {
      if (this.success.hasOwnProperty(iter57))
      {
        iter57 = this.success[iter57];
        output.writeBinary(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getColumnDescriptors_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getColumnDescriptors_args.prototype = {};
Hbase_getColumnDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getColumnDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getColumnDescriptors_result.prototype = {};
Hbase_getColumnDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size58 = 0;
        var _rtmp362;
        this.success = {};
        var _ktype59 = 0;
        var _vtype60 = 0;
        _rtmp362 = input.readMapBegin();
        _ktype59 = _rtmp362.ktype;
        _vtype60 = _rtmp362.vtype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var key64 = null;
          var val65 = null;
          key64 = input.readBinary();
          val65 = new ttypes.ColumnDescriptor();
          val65.read(input);
          this.success[key64] = val65;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter66 in this.success)
    {
      if (this.success.hasOwnProperty(kiter66))
      {
        var viter67 = this.success[kiter66];
        output.writeBinary(kiter66);
        viter67.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableRegions_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getTableRegions_args.prototype = {};
Hbase_getTableRegions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableRegions_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getTableRegions_result.prototype = {};
Hbase_getTableRegions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.success = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.TRegionInfo();
          elem74.read(input);
          this.success.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter75 in this.success)
    {
      if (this.success.hasOwnProperty(iter75))
      {
        iter75 = this.success[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_createTable_args = function(args) {
  this.tableName = null;
  this.columnFamilies = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.columnFamilies !== undefined) {
      this.columnFamilies = args.columnFamilies;
    }
  }
};
Hbase_createTable_args.prototype = {};
Hbase_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.columnFamilies = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new ttypes.ColumnDescriptor();
          elem82.read(input);
          this.columnFamilies.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnFamilies !== null && this.columnFamilies !== undefined) {
    output.writeFieldBegin('columnFamilies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnFamilies.length);
    for (var iter83 in this.columnFamilies)
    {
      if (this.columnFamilies.hasOwnProperty(iter83))
      {
        iter83 = this.columnFamilies[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_createTable_result = function(args) {
  this.io = null;
  this.ia = null;
  this.exist = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExists) {
    this.exist = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
    if (args.exist !== undefined) {
      this.exist = args.exist;
    }
  }
};
Hbase_createTable_result.prototype = {};
Hbase_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.exist = new ttypes.AlreadyExists();
        this.exist.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.exist !== null && this.exist !== undefined) {
    output.writeFieldBegin('exist', Thrift.Type.STRUCT, 3);
    this.exist.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_deleteTable_args.prototype = {};
Hbase_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteTable_result.prototype = {};
Hbase_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_get_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_get_args.prototype = {};
Hbase_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size84 = 0;
        var _rtmp388;
        this.attributes = {};
        var _ktype85 = 0;
        var _vtype86 = 0;
        _rtmp388 = input.readMapBegin();
        _ktype85 = _rtmp388.ktype;
        _vtype86 = _rtmp388.vtype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var key90 = null;
          var val91 = null;
          key90 = input.readBinary();
          val91 = input.readBinary();
          this.attributes[key90] = val91;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter92 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter92))
      {
        var viter93 = this.attributes[kiter92];
        output.writeBinary(kiter92);
        output.writeBinary(viter93);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_get_result.prototype = {};
Hbase_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.success = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = new ttypes.TCell();
          elem100.read(input);
          this.success.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter101 in this.success)
    {
      if (this.success.hasOwnProperty(iter101))
      {
        iter101 = this.success[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVer_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.numVersions !== undefined) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getVer_args.prototype = {};
Hbase_getVer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size102 = 0;
        var _rtmp3106;
        this.attributes = {};
        var _ktype103 = 0;
        var _vtype104 = 0;
        _rtmp3106 = input.readMapBegin();
        _ktype103 = _rtmp3106.ktype;
        _vtype104 = _rtmp3106.vtype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var key108 = null;
          var val109 = null;
          key108 = input.readBinary();
          val109 = input.readBinary();
          this.attributes[key108] = val109;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 4);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter110 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter110))
      {
        var viter111 = this.attributes[kiter110];
        output.writeBinary(kiter110);
        output.writeBinary(viter111);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVer_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getVer_result.prototype = {};
Hbase_getVer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.TCell();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVerTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.numVersions !== undefined) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getVerTs_args.prototype = {};
Hbase_getVerTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size120 = 0;
        var _rtmp3124;
        this.attributes = {};
        var _ktype121 = 0;
        var _vtype122 = 0;
        _rtmp3124 = input.readMapBegin();
        _ktype121 = _rtmp3124.ktype;
        _vtype122 = _rtmp3124.vtype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var key126 = null;
          var val127 = null;
          key126 = input.readBinary();
          val127 = input.readBinary();
          this.attributes[key126] = val127;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 5);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter128 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter128))
      {
        var viter129 = this.attributes[kiter128];
        output.writeBinary(kiter128);
        output.writeBinary(viter129);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVerTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getVerTs_result.prototype = {};
Hbase_getVerTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.success = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new ttypes.TCell();
          elem136.read(input);
          this.success.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter137 in this.success)
    {
      if (this.success.hasOwnProperty(iter137))
      {
        iter137 = this.success[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRow_args.prototype = {};
Hbase_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size138 = 0;
        var _rtmp3142;
        this.attributes = {};
        var _ktype139 = 0;
        var _vtype140 = 0;
        _rtmp3142 = input.readMapBegin();
        _ktype139 = _rtmp3142.ktype;
        _vtype140 = _rtmp3142.vtype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var key144 = null;
          var val145 = null;
          key144 = input.readBinary();
          val145 = input.readBinary();
          this.attributes[key144] = val145;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter146 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter146))
      {
        var viter147 = this.attributes[kiter146];
        output.writeBinary(kiter146);
        output.writeBinary(viter147);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRow_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRow_result.prototype = {};
Hbase_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = new ttypes.TRowResult();
          elem154.read(input);
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumns_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowWithColumns_args.prototype = {};
Hbase_getRowWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.columns = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readBinary();
          this.columns.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size163 = 0;
        var _rtmp3167;
        this.attributes = {};
        var _ktype164 = 0;
        var _vtype165 = 0;
        _rtmp3167 = input.readMapBegin();
        _ktype164 = _rtmp3167.ktype;
        _vtype165 = _rtmp3167.vtype;
        _size163 = _rtmp3167.size;
        for (var _i168 = 0; _i168 < _size163; ++_i168)
        {
          var key169 = null;
          var val170 = null;
          key169 = input.readBinary();
          val170 = input.readBinary();
          this.attributes[key169] = val170;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter171 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter171))
      {
        iter171 = this.columns[iter171];
        output.writeBinary(iter171);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter172 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter172))
      {
        var viter173 = this.attributes[kiter172];
        output.writeBinary(kiter172);
        output.writeBinary(viter173);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumns_result.prototype = {};
Hbase_getRowWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size174 = 0;
        var _rtmp3178;
        this.success = [];
        var _etype177 = 0;
        _rtmp3178 = input.readListBegin();
        _etype177 = _rtmp3178.etype;
        _size174 = _rtmp3178.size;
        for (var _i179 = 0; _i179 < _size174; ++_i179)
        {
          var elem180 = null;
          elem180 = new ttypes.TRowResult();
          elem180.read(input);
          this.success.push(elem180);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter181 in this.success)
    {
      if (this.success.hasOwnProperty(iter181))
      {
        iter181 = this.success[iter181];
        iter181.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowTs_args.prototype = {};
Hbase_getRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size182 = 0;
        var _rtmp3186;
        this.attributes = {};
        var _ktype183 = 0;
        var _vtype184 = 0;
        _rtmp3186 = input.readMapBegin();
        _ktype183 = _rtmp3186.ktype;
        _vtype184 = _rtmp3186.vtype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var key188 = null;
          var val189 = null;
          key188 = input.readBinary();
          val189 = input.readBinary();
          this.attributes[key188] = val189;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter190 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter190))
      {
        var viter191 = this.attributes[kiter190];
        output.writeBinary(kiter190);
        output.writeBinary(viter191);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowTs_result.prototype = {};
Hbase_getRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.success = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new ttypes.TRowResult();
          elem198.read(input);
          this.success.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter199 in this.success)
    {
      if (this.success.hasOwnProperty(iter199))
      {
        iter199 = this.success[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowWithColumnsTs_args.prototype = {};
Hbase_getRowWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.columns = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = input.readBinary();
          this.columns.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size207 = 0;
        var _rtmp3211;
        this.attributes = {};
        var _ktype208 = 0;
        var _vtype209 = 0;
        _rtmp3211 = input.readMapBegin();
        _ktype208 = _rtmp3211.ktype;
        _vtype209 = _rtmp3211.vtype;
        _size207 = _rtmp3211.size;
        for (var _i212 = 0; _i212 < _size207; ++_i212)
        {
          var key213 = null;
          var val214 = null;
          key213 = input.readBinary();
          val214 = input.readBinary();
          this.attributes[key213] = val214;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter215 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter215))
      {
        iter215 = this.columns[iter215];
        output.writeBinary(iter215);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter216 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter216))
      {
        var viter217 = this.attributes[kiter216];
        output.writeBinary(kiter216);
        output.writeBinary(viter217);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumnsTs_result.prototype = {};
Hbase_getRowWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size218 = 0;
        var _rtmp3222;
        this.success = [];
        var _etype221 = 0;
        _rtmp3222 = input.readListBegin();
        _etype221 = _rtmp3222.etype;
        _size218 = _rtmp3222.size;
        for (var _i223 = 0; _i223 < _size218; ++_i223)
        {
          var elem224 = null;
          elem224 = new ttypes.TRowResult();
          elem224.read(input);
          this.success.push(elem224);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter225 in this.success)
    {
      if (this.success.hasOwnProperty(iter225))
      {
        iter225 = this.success[iter225];
        iter225.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRows_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRows_args.prototype = {};
Hbase_getRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size226 = 0;
        var _rtmp3230;
        this.rows = [];
        var _etype229 = 0;
        _rtmp3230 = input.readListBegin();
        _etype229 = _rtmp3230.etype;
        _size226 = _rtmp3230.size;
        for (var _i231 = 0; _i231 < _size226; ++_i231)
        {
          var elem232 = null;
          elem232 = input.readBinary();
          this.rows.push(elem232);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size233 = 0;
        var _rtmp3237;
        this.attributes = {};
        var _ktype234 = 0;
        var _vtype235 = 0;
        _rtmp3237 = input.readMapBegin();
        _ktype234 = _rtmp3237.ktype;
        _vtype235 = _rtmp3237.vtype;
        _size233 = _rtmp3237.size;
        for (var _i238 = 0; _i238 < _size233; ++_i238)
        {
          var key239 = null;
          var val240 = null;
          key239 = input.readBinary();
          val240 = input.readBinary();
          this.attributes[key239] = val240;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter241 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter241))
      {
        iter241 = this.rows[iter241];
        output.writeBinary(iter241);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter242 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter242))
      {
        var viter243 = this.attributes[kiter242];
        output.writeBinary(kiter242);
        output.writeBinary(viter243);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRows_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRows_result.prototype = {};
Hbase_getRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size244 = 0;
        var _rtmp3248;
        this.success = [];
        var _etype247 = 0;
        _rtmp3248 = input.readListBegin();
        _etype247 = _rtmp3248.etype;
        _size244 = _rtmp3248.size;
        for (var _i249 = 0; _i249 < _size244; ++_i249)
        {
          var elem250 = null;
          elem250 = new ttypes.TRowResult();
          elem250.read(input);
          this.success.push(elem250);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter251 in this.success)
    {
      if (this.success.hasOwnProperty(iter251))
      {
        iter251 = this.success[iter251];
        iter251.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumns_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsWithColumns_args.prototype = {};
Hbase_getRowsWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.rows = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = input.readBinary();
          this.rows.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size259 = 0;
        var _rtmp3263;
        this.columns = [];
        var _etype262 = 0;
        _rtmp3263 = input.readListBegin();
        _etype262 = _rtmp3263.etype;
        _size259 = _rtmp3263.size;
        for (var _i264 = 0; _i264 < _size259; ++_i264)
        {
          var elem265 = null;
          elem265 = input.readBinary();
          this.columns.push(elem265);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size266 = 0;
        var _rtmp3270;
        this.attributes = {};
        var _ktype267 = 0;
        var _vtype268 = 0;
        _rtmp3270 = input.readMapBegin();
        _ktype267 = _rtmp3270.ktype;
        _vtype268 = _rtmp3270.vtype;
        _size266 = _rtmp3270.size;
        for (var _i271 = 0; _i271 < _size266; ++_i271)
        {
          var key272 = null;
          var val273 = null;
          key272 = input.readBinary();
          val273 = input.readBinary();
          this.attributes[key272] = val273;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter274 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter274))
      {
        iter274 = this.rows[iter274];
        output.writeBinary(iter274);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter275 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter275))
      {
        iter275 = this.columns[iter275];
        output.writeBinary(iter275);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter276 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter276))
      {
        var viter277 = this.attributes[kiter276];
        output.writeBinary(kiter276);
        output.writeBinary(viter277);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumns_result.prototype = {};
Hbase_getRowsWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size278 = 0;
        var _rtmp3282;
        this.success = [];
        var _etype281 = 0;
        _rtmp3282 = input.readListBegin();
        _etype281 = _rtmp3282.etype;
        _size278 = _rtmp3282.size;
        for (var _i283 = 0; _i283 < _size278; ++_i283)
        {
          var elem284 = null;
          elem284 = new ttypes.TRowResult();
          elem284.read(input);
          this.success.push(elem284);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter285 in this.success)
    {
      if (this.success.hasOwnProperty(iter285))
      {
        iter285 = this.success[iter285];
        iter285.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsTs_args.prototype = {};
Hbase_getRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size286 = 0;
        var _rtmp3290;
        this.rows = [];
        var _etype289 = 0;
        _rtmp3290 = input.readListBegin();
        _etype289 = _rtmp3290.etype;
        _size286 = _rtmp3290.size;
        for (var _i291 = 0; _i291 < _size286; ++_i291)
        {
          var elem292 = null;
          elem292 = input.readBinary();
          this.rows.push(elem292);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size293 = 0;
        var _rtmp3297;
        this.attributes = {};
        var _ktype294 = 0;
        var _vtype295 = 0;
        _rtmp3297 = input.readMapBegin();
        _ktype294 = _rtmp3297.ktype;
        _vtype295 = _rtmp3297.vtype;
        _size293 = _rtmp3297.size;
        for (var _i298 = 0; _i298 < _size293; ++_i298)
        {
          var key299 = null;
          var val300 = null;
          key299 = input.readBinary();
          val300 = input.readBinary();
          this.attributes[key299] = val300;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter301 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter301))
      {
        iter301 = this.rows[iter301];
        output.writeBinary(iter301);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter302 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter302))
      {
        var viter303 = this.attributes[kiter302];
        output.writeBinary(kiter302);
        output.writeBinary(viter303);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsTs_result.prototype = {};
Hbase_getRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.success = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = new ttypes.TRowResult();
          elem310.read(input);
          this.success.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter311 in this.success)
    {
      if (this.success.hasOwnProperty(iter311))
      {
        iter311 = this.success[iter311];
        iter311.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsWithColumnsTs_args.prototype = {};
Hbase_getRowsWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.rows = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readBinary();
          this.rows.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size319 = 0;
        var _rtmp3323;
        this.columns = [];
        var _etype322 = 0;
        _rtmp3323 = input.readListBegin();
        _etype322 = _rtmp3323.etype;
        _size319 = _rtmp3323.size;
        for (var _i324 = 0; _i324 < _size319; ++_i324)
        {
          var elem325 = null;
          elem325 = input.readBinary();
          this.columns.push(elem325);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size326 = 0;
        var _rtmp3330;
        this.attributes = {};
        var _ktype327 = 0;
        var _vtype328 = 0;
        _rtmp3330 = input.readMapBegin();
        _ktype327 = _rtmp3330.ktype;
        _vtype328 = _rtmp3330.vtype;
        _size326 = _rtmp3330.size;
        for (var _i331 = 0; _i331 < _size326; ++_i331)
        {
          var key332 = null;
          var val333 = null;
          key332 = input.readBinary();
          val333 = input.readBinary();
          this.attributes[key332] = val333;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter334 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter334))
      {
        iter334 = this.rows[iter334];
        output.writeBinary(iter334);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter335 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter335))
      {
        iter335 = this.columns[iter335];
        output.writeBinary(iter335);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter336 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter336))
      {
        var viter337 = this.attributes[kiter336];
        output.writeBinary(kiter336);
        output.writeBinary(viter337);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumnsTs_result.prototype = {};
Hbase_getRowsWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size338 = 0;
        var _rtmp3342;
        this.success = [];
        var _etype341 = 0;
        _rtmp3342 = input.readListBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = new ttypes.TRowResult();
          elem344.read(input);
          this.success.push(elem344);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter345 in this.success)
    {
      if (this.success.hasOwnProperty(iter345))
      {
        iter345 = this.success[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRow_args.prototype = {};
Hbase_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.mutations = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = new ttypes.Mutation();
          elem352.read(input);
          this.mutations.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size353 = 0;
        var _rtmp3357;
        this.attributes = {};
        var _ktype354 = 0;
        var _vtype355 = 0;
        _rtmp3357 = input.readMapBegin();
        _ktype354 = _rtmp3357.ktype;
        _vtype355 = _rtmp3357.vtype;
        _size353 = _rtmp3357.size;
        for (var _i358 = 0; _i358 < _size353; ++_i358)
        {
          var key359 = null;
          var val360 = null;
          key359 = input.readBinary();
          val360 = input.readBinary();
          this.attributes[key359] = val360;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter361 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter361))
      {
        iter361 = this.mutations[iter361];
        iter361.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter362 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter362))
      {
        var viter363 = this.attributes[kiter362];
        output.writeBinary(kiter362);
        output.writeBinary(viter363);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRow_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRow_result.prototype = {};
Hbase_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRowTs_args.prototype = {};
Hbase_mutateRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.mutations = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new ttypes.Mutation();
          elem370.read(input);
          this.mutations.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size371 = 0;
        var _rtmp3375;
        this.attributes = {};
        var _ktype372 = 0;
        var _vtype373 = 0;
        _rtmp3375 = input.readMapBegin();
        _ktype372 = _rtmp3375.ktype;
        _vtype373 = _rtmp3375.vtype;
        _size371 = _rtmp3375.size;
        for (var _i376 = 0; _i376 < _size371; ++_i376)
        {
          var key377 = null;
          var val378 = null;
          key377 = input.readBinary();
          val378 = input.readBinary();
          this.attributes[key377] = val378;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter379 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter379))
      {
        iter379 = this.mutations[iter379];
        iter379.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter380 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter380))
      {
        var viter381 = this.attributes[kiter380];
        output.writeBinary(kiter380);
        output.writeBinary(viter381);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowTs_result.prototype = {};
Hbase_mutateRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRows_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined) {
      this.rowBatches = args.rowBatches;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRows_args.prototype = {};
Hbase_mutateRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size382 = 0;
        var _rtmp3386;
        this.rowBatches = [];
        var _etype385 = 0;
        _rtmp3386 = input.readListBegin();
        _etype385 = _rtmp3386.etype;
        _size382 = _rtmp3386.size;
        for (var _i387 = 0; _i387 < _size382; ++_i387)
        {
          var elem388 = null;
          elem388 = new ttypes.BatchMutation();
          elem388.read(input);
          this.rowBatches.push(elem388);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size389 = 0;
        var _rtmp3393;
        this.attributes = {};
        var _ktype390 = 0;
        var _vtype391 = 0;
        _rtmp3393 = input.readMapBegin();
        _ktype390 = _rtmp3393.ktype;
        _vtype391 = _rtmp3393.vtype;
        _size389 = _rtmp3393.size;
        for (var _i394 = 0; _i394 < _size389; ++_i394)
        {
          var key395 = null;
          var val396 = null;
          key395 = input.readBinary();
          val396 = input.readBinary();
          this.attributes[key395] = val396;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter397 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter397))
      {
        iter397 = this.rowBatches[iter397];
        iter397.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter398 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter398))
      {
        var viter399 = this.attributes[kiter398];
        output.writeBinary(kiter398);
        output.writeBinary(viter399);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRows_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRows_result.prototype = {};
Hbase_mutateRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowsTs_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined) {
      this.rowBatches = args.rowBatches;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRowsTs_args.prototype = {};
Hbase_mutateRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size400 = 0;
        var _rtmp3404;
        this.rowBatches = [];
        var _etype403 = 0;
        _rtmp3404 = input.readListBegin();
        _etype403 = _rtmp3404.etype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var elem406 = null;
          elem406 = new ttypes.BatchMutation();
          elem406.read(input);
          this.rowBatches.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size407 = 0;
        var _rtmp3411;
        this.attributes = {};
        var _ktype408 = 0;
        var _vtype409 = 0;
        _rtmp3411 = input.readMapBegin();
        _ktype408 = _rtmp3411.ktype;
        _vtype409 = _rtmp3411.vtype;
        _size407 = _rtmp3411.size;
        for (var _i412 = 0; _i412 < _size407; ++_i412)
        {
          var key413 = null;
          var val414 = null;
          key413 = input.readBinary();
          val414 = input.readBinary();
          this.attributes[key413] = val414;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter415 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter415))
      {
        iter415 = this.rowBatches[iter415];
        iter415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter416 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter416))
      {
        var viter417 = this.attributes[kiter416];
        output.writeBinary(kiter416);
        output.writeBinary(viter417);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowsTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowsTs_result.prototype = {};
Hbase_mutateRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_atomicIncrement_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Hbase_atomicIncrement_args.prototype = {};
Hbase_atomicIncrement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_atomicIncrement_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_atomicIncrement_result.prototype = {};
Hbase_atomicIncrement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAll_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAll_args.prototype = {};
Hbase_deleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size418 = 0;
        var _rtmp3422;
        this.attributes = {};
        var _ktype419 = 0;
        var _vtype420 = 0;
        _rtmp3422 = input.readMapBegin();
        _ktype419 = _rtmp3422.ktype;
        _vtype420 = _rtmp3422.vtype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var key424 = null;
          var val425 = null;
          key424 = input.readBinary();
          val425 = input.readBinary();
          this.attributes[key424] = val425;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter426 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter426))
      {
        var viter427 = this.attributes[kiter426];
        output.writeBinary(kiter426);
        output.writeBinary(viter427);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAll_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAll_result.prototype = {};
Hbase_deleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllTs_args.prototype = {};
Hbase_deleteAllTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size428 = 0;
        var _rtmp3432;
        this.attributes = {};
        var _ktype429 = 0;
        var _vtype430 = 0;
        _rtmp3432 = input.readMapBegin();
        _ktype429 = _rtmp3432.ktype;
        _vtype430 = _rtmp3432.vtype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var key434 = null;
          var val435 = null;
          key434 = input.readBinary();
          val435 = input.readBinary();
          this.attributes[key434] = val435;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter436 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter436))
      {
        var viter437 = this.attributes[kiter436];
        output.writeBinary(kiter436);
        output.writeBinary(viter437);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllTs_result.prototype = {};
Hbase_deleteAllTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllRow_args.prototype = {};
Hbase_deleteAllRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size438 = 0;
        var _rtmp3442;
        this.attributes = {};
        var _ktype439 = 0;
        var _vtype440 = 0;
        _rtmp3442 = input.readMapBegin();
        _ktype439 = _rtmp3442.ktype;
        _vtype440 = _rtmp3442.vtype;
        _size438 = _rtmp3442.size;
        for (var _i443 = 0; _i443 < _size438; ++_i443)
        {
          var key444 = null;
          var val445 = null;
          key444 = input.readBinary();
          val445 = input.readBinary();
          this.attributes[key444] = val445;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter446 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter446))
      {
        var viter447 = this.attributes[kiter446];
        output.writeBinary(kiter446);
        output.writeBinary(viter447);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRow_result.prototype = {};
Hbase_deleteAllRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_increment_args = function(args) {
  this.increment = null;
  if (args) {
    if (args.increment !== undefined) {
      this.increment = args.increment;
    }
  }
};
Hbase_increment_args.prototype = {};
Hbase_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.increment = new ttypes.TIncrement();
        this.increment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_args');
  if (this.increment !== null && this.increment !== undefined) {
    output.writeFieldBegin('increment', Thrift.Type.STRUCT, 1);
    this.increment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_increment_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_increment_result.prototype = {};
Hbase_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_incrementRows_args = function(args) {
  this.increments = null;
  if (args) {
    if (args.increments !== undefined) {
      this.increments = args.increments;
    }
  }
};
Hbase_incrementRows_args.prototype = {};
Hbase_incrementRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size448 = 0;
        var _rtmp3452;
        this.increments = [];
        var _etype451 = 0;
        _rtmp3452 = input.readListBegin();
        _etype451 = _rtmp3452.etype;
        _size448 = _rtmp3452.size;
        for (var _i453 = 0; _i453 < _size448; ++_i453)
        {
          var elem454 = null;
          elem454 = new ttypes.TIncrement();
          elem454.read(input);
          this.increments.push(elem454);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_args');
  if (this.increments !== null && this.increments !== undefined) {
    output.writeFieldBegin('increments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.increments.length);
    for (var iter455 in this.increments)
    {
      if (this.increments.hasOwnProperty(iter455))
      {
        iter455 = this.increments[iter455];
        iter455.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_incrementRows_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_incrementRows_result.prototype = {};
Hbase_incrementRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllRowTs_args.prototype = {};
Hbase_deleteAllRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size456 = 0;
        var _rtmp3460;
        this.attributes = {};
        var _ktype457 = 0;
        var _vtype458 = 0;
        _rtmp3460 = input.readMapBegin();
        _ktype457 = _rtmp3460.ktype;
        _vtype458 = _rtmp3460.vtype;
        _size456 = _rtmp3460.size;
        for (var _i461 = 0; _i461 < _size456; ++_i461)
        {
          var key462 = null;
          var val463 = null;
          key462 = input.readBinary();
          val463 = input.readBinary();
          this.attributes[key462] = val463;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter464 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter464))
      {
        var viter465 = this.attributes[kiter464];
        output.writeBinary(kiter464);
        output.writeBinary(viter465);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRowTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRowTs_result.prototype = {};
Hbase_deleteAllRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args = function(args) {
  this.tableName = null;
  this.scan = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.scan !== undefined) {
      this.scan = args.scan;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithScan_args.prototype = {};
Hbase_scannerOpenWithScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size466 = 0;
        var _rtmp3470;
        this.attributes = {};
        var _ktype467 = 0;
        var _vtype468 = 0;
        _rtmp3470 = input.readMapBegin();
        _ktype467 = _rtmp3470.ktype;
        _vtype468 = _rtmp3470.vtype;
        _size466 = _rtmp3470.size;
        for (var _i471 = 0; _i471 < _size466; ++_i471)
        {
          var key472 = null;
          var val473 = null;
          key472 = input.readBinary();
          val473 = input.readBinary();
          this.attributes[key472] = val473;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter474 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter474))
      {
        var viter475 = this.attributes[kiter474];
        output.writeBinary(kiter474);
        output.writeBinary(viter475);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithScan_result.prototype = {};
Hbase_scannerOpenWithScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpen_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpen_args.prototype = {};
Hbase_scannerOpen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.columns = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = input.readBinary();
          this.columns.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size483 = 0;
        var _rtmp3487;
        this.attributes = {};
        var _ktype484 = 0;
        var _vtype485 = 0;
        _rtmp3487 = input.readMapBegin();
        _ktype484 = _rtmp3487.ktype;
        _vtype485 = _rtmp3487.vtype;
        _size483 = _rtmp3487.size;
        for (var _i488 = 0; _i488 < _size483; ++_i488)
        {
          var key489 = null;
          var val490 = null;
          key489 = input.readBinary();
          val490 = input.readBinary();
          this.attributes[key489] = val490;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter491 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter491))
      {
        iter491 = this.columns[iter491];
        output.writeBinary(iter491);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter492 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter492))
      {
        var viter493 = this.attributes[kiter492];
        output.writeBinary(kiter492);
        output.writeBinary(viter493);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpen_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpen_result.prototype = {};
Hbase_scannerOpen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithStop_args.prototype = {};
Hbase_scannerOpenWithStop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size494 = 0;
        var _rtmp3498;
        this.columns = [];
        var _etype497 = 0;
        _rtmp3498 = input.readListBegin();
        _etype497 = _rtmp3498.etype;
        _size494 = _rtmp3498.size;
        for (var _i499 = 0; _i499 < _size494; ++_i499)
        {
          var elem500 = null;
          elem500 = input.readBinary();
          this.columns.push(elem500);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size501 = 0;
        var _rtmp3505;
        this.attributes = {};
        var _ktype502 = 0;
        var _vtype503 = 0;
        _rtmp3505 = input.readMapBegin();
        _ktype502 = _rtmp3505.ktype;
        _vtype503 = _rtmp3505.vtype;
        _size501 = _rtmp3505.size;
        for (var _i506 = 0; _i506 < _size501; ++_i506)
        {
          var key507 = null;
          var val508 = null;
          key507 = input.readBinary();
          val508 = input.readBinary();
          this.attributes[key507] = val508;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeBinary(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter509 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter509))
      {
        iter509 = this.columns[iter509];
        output.writeBinary(iter509);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter510 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter510))
      {
        var viter511 = this.attributes[kiter510];
        output.writeBinary(kiter510);
        output.writeBinary(viter511);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStop_result.prototype = {};
Hbase_scannerOpenWithStop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args = function(args) {
  this.tableName = null;
  this.startAndPrefix = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startAndPrefix !== undefined) {
      this.startAndPrefix = args.startAndPrefix;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithPrefix_args.prototype = {};
Hbase_scannerOpenWithPrefix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startAndPrefix = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size512 = 0;
        var _rtmp3516;
        this.columns = [];
        var _etype515 = 0;
        _rtmp3516 = input.readListBegin();
        _etype515 = _rtmp3516.etype;
        _size512 = _rtmp3516.size;
        for (var _i517 = 0; _i517 < _size512; ++_i517)
        {
          var elem518 = null;
          elem518 = input.readBinary();
          this.columns.push(elem518);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size519 = 0;
        var _rtmp3523;
        this.attributes = {};
        var _ktype520 = 0;
        var _vtype521 = 0;
        _rtmp3523 = input.readMapBegin();
        _ktype520 = _rtmp3523.ktype;
        _vtype521 = _rtmp3523.vtype;
        _size519 = _rtmp3523.size;
        for (var _i524 = 0; _i524 < _size519; ++_i524)
        {
          var key525 = null;
          var val526 = null;
          key525 = input.readBinary();
          val526 = input.readBinary();
          this.attributes[key525] = val526;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startAndPrefix !== null && this.startAndPrefix !== undefined) {
    output.writeFieldBegin('startAndPrefix', Thrift.Type.STRING, 2);
    output.writeBinary(this.startAndPrefix);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter527 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter527))
      {
        iter527 = this.columns[iter527];
        output.writeBinary(iter527);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter528 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter528))
      {
        var viter529 = this.attributes[kiter528];
        output.writeBinary(kiter528);
        output.writeBinary(viter529);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithPrefix_result.prototype = {};
Hbase_scannerOpenWithPrefix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenTs_args.prototype = {};
Hbase_scannerOpenTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size530 = 0;
        var _rtmp3534;
        this.columns = [];
        var _etype533 = 0;
        _rtmp3534 = input.readListBegin();
        _etype533 = _rtmp3534.etype;
        _size530 = _rtmp3534.size;
        for (var _i535 = 0; _i535 < _size530; ++_i535)
        {
          var elem536 = null;
          elem536 = input.readBinary();
          this.columns.push(elem536);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size537 = 0;
        var _rtmp3541;
        this.attributes = {};
        var _ktype538 = 0;
        var _vtype539 = 0;
        _rtmp3541 = input.readMapBegin();
        _ktype538 = _rtmp3541.ktype;
        _vtype539 = _rtmp3541.vtype;
        _size537 = _rtmp3541.size;
        for (var _i542 = 0; _i542 < _size537; ++_i542)
        {
          var key543 = null;
          var val544 = null;
          key543 = input.readBinary();
          val544 = input.readBinary();
          this.attributes[key543] = val544;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter545 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter545))
      {
        iter545 = this.columns[iter545];
        output.writeBinary(iter545);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter546 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter546))
      {
        var viter547 = this.attributes[kiter546];
        output.writeBinary(kiter546);
        output.writeBinary(viter547);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenTs_result.prototype = {};
Hbase_scannerOpenTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithStopTs_args.prototype = {};
Hbase_scannerOpenWithStopTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size548 = 0;
        var _rtmp3552;
        this.columns = [];
        var _etype551 = 0;
        _rtmp3552 = input.readListBegin();
        _etype551 = _rtmp3552.etype;
        _size548 = _rtmp3552.size;
        for (var _i553 = 0; _i553 < _size548; ++_i553)
        {
          var elem554 = null;
          elem554 = input.readBinary();
          this.columns.push(elem554);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size555 = 0;
        var _rtmp3559;
        this.attributes = {};
        var _ktype556 = 0;
        var _vtype557 = 0;
        _rtmp3559 = input.readMapBegin();
        _ktype556 = _rtmp3559.ktype;
        _vtype557 = _rtmp3559.vtype;
        _size555 = _rtmp3559.size;
        for (var _i560 = 0; _i560 < _size555; ++_i560)
        {
          var key561 = null;
          var val562 = null;
          key561 = input.readBinary();
          val562 = input.readBinary();
          this.attributes[key561] = val562;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeBinary(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeBinary(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter563 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter563))
      {
        iter563 = this.columns[iter563];
        output.writeBinary(iter563);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter564 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter564))
      {
        var viter565 = this.attributes[kiter564];
        output.writeBinary(kiter564);
        output.writeBinary(viter565);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStopTs_result.prototype = {};
Hbase_scannerOpenWithStopTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGet_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Hbase_scannerGet_args.prototype = {};
Hbase_scannerGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGet_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGet_result.prototype = {};
Hbase_scannerGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size566 = 0;
        var _rtmp3570;
        this.success = [];
        var _etype569 = 0;
        _rtmp3570 = input.readListBegin();
        _etype569 = _rtmp3570.etype;
        _size566 = _rtmp3570.size;
        for (var _i571 = 0; _i571 < _size566; ++_i571)
        {
          var elem572 = null;
          elem572 = new ttypes.TRowResult();
          elem572.read(input);
          this.success.push(elem572);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter573 in this.success)
    {
      if (this.success.hasOwnProperty(iter573))
      {
        iter573 = this.success[iter573];
        iter573.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGetList_args = function(args) {
  this.id = null;
  this.nbRows = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.nbRows !== undefined) {
      this.nbRows = args.nbRows;
    }
  }
};
Hbase_scannerGetList_args.prototype = {};
Hbase_scannerGetList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nbRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.nbRows !== null && this.nbRows !== undefined) {
    output.writeFieldBegin('nbRows', Thrift.Type.I32, 2);
    output.writeI32(this.nbRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGetList_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGetList_result.prototype = {};
Hbase_scannerGetList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size574 = 0;
        var _rtmp3578;
        this.success = [];
        var _etype577 = 0;
        _rtmp3578 = input.readListBegin();
        _etype577 = _rtmp3578.etype;
        _size574 = _rtmp3578.size;
        for (var _i579 = 0; _i579 < _size574; ++_i579)
        {
          var elem580 = null;
          elem580 = new ttypes.TRowResult();
          elem580.read(input);
          this.success.push(elem580);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter581 in this.success)
    {
      if (this.success.hasOwnProperty(iter581))
      {
        iter581 = this.success[iter581];
        iter581.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerClose_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Hbase_scannerClose_args.prototype = {};
Hbase_scannerClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerClose_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerClose_result.prototype = {};
Hbase_scannerClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowOrBefore_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.family = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
  }
};
Hbase_getRowOrBefore_args.prototype = {};
Hbase_getRowOrBefore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeBinary(this.family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowOrBefore_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowOrBefore_result.prototype = {};
Hbase_getRowOrBefore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size582 = 0;
        var _rtmp3586;
        this.success = [];
        var _etype585 = 0;
        _rtmp3586 = input.readListBegin();
        _etype585 = _rtmp3586.etype;
        _size582 = _rtmp3586.size;
        for (var _i587 = 0; _i587 < _size582; ++_i587)
        {
          var elem588 = null;
          elem588 = new ttypes.TCell();
          elem588.read(input);
          this.success.push(elem588);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter589 in this.success)
    {
      if (this.success.hasOwnProperty(iter589))
      {
        iter589 = this.success[iter589];
        iter589.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRegionInfo_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
  }
};
Hbase_getRegionInfo_args.prototype = {};
Hbase_getRegionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRegionInfo_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRegionInfo_result.prototype = {};
Hbase_getRegionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRegionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_append_args = function(args) {
  this.append = null;
  if (args) {
    if (args.append !== undefined) {
      this.append = args.append;
    }
  }
};
Hbase_append_args.prototype = {};
Hbase_append_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.append = new ttypes.TAppend();
        this.append.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_append_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_append_args');
  if (this.append !== null && this.append !== undefined) {
    output.writeFieldBegin('append', Thrift.Type.STRUCT, 1);
    this.append.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_append_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_append_result.prototype = {};
Hbase_append_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size590 = 0;
        var _rtmp3594;
        this.success = [];
        var _etype593 = 0;
        _rtmp3594 = input.readListBegin();
        _etype593 = _rtmp3594.etype;
        _size590 = _rtmp3594.size;
        for (var _i595 = 0; _i595 < _size590; ++_i595)
        {
          var elem596 = null;
          elem596 = new ttypes.TCell();
          elem596.read(input);
          this.success.push(elem596);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_append_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_append_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter597 in this.success)
    {
      if (this.success.hasOwnProperty(iter597))
      {
        iter597 = this.success[iter597];
        iter597.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_checkAndPut_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  this.mput = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.mput !== undefined) {
      this.mput = args.mput;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_checkAndPut_args.prototype = {};
Hbase_checkAndPut_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.mput = new ttypes.Mutation();
        this.mput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size598 = 0;
        var _rtmp3602;
        this.attributes = {};
        var _ktype599 = 0;
        var _vtype600 = 0;
        _rtmp3602 = input.readMapBegin();
        _ktype599 = _rtmp3602.ktype;
        _vtype600 = _rtmp3602.vtype;
        _size598 = _rtmp3602.size;
        for (var _i603 = 0; _i603 < _size598; ++_i603)
        {
          var key604 = null;
          var val605 = null;
          key604 = input.readBinary();
          val605 = input.readBinary();
          this.attributes[key604] = val605;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_checkAndPut_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_checkAndPut_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeBinary(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeBinary(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeBinary(this.column);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 5);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.mput !== null && this.mput !== undefined) {
    output.writeFieldBegin('mput', Thrift.Type.STRUCT, 6);
    this.mput.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter606 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter606))
      {
        var viter607 = this.attributes[kiter606];
        output.writeBinary(kiter606);
        output.writeBinary(viter607);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_checkAndPut_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_checkAndPut_result.prototype = {};
Hbase_checkAndPut_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_checkAndPut_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_checkAndPut_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HbaseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
HbaseClient.prototype = {};
HbaseClient.prototype.seqid = function() { return this._seqid; }
HbaseClient.prototype.new_seqid = function() { return this._seqid += 1; }
HbaseClient.prototype.enableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableTable(tableName);
  }
};

HbaseClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_enableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.disableTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disableTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disableTable(tableName);
  }
};

HbaseClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_disableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.isTableEnabled = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isTableEnabled(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isTableEnabled(tableName);
  }
};

HbaseClient.prototype.send_isTableEnabled = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_isTableEnabled_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_isTableEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableEnabled failed: unknown result');
};
HbaseClient.prototype.compact = function(tableNameOrRegionName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compact(tableNameOrRegionName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compact(tableNameOrRegionName);
  }
};

HbaseClient.prototype.send_compact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_compact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_compact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.majorCompact = function(tableNameOrRegionName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_majorCompact(tableNameOrRegionName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_majorCompact(tableNameOrRegionName);
  }
};

HbaseClient.prototype.send_majorCompact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('majorCompact', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_majorCompact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_majorCompact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_majorCompact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.getTableNames = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableNames();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableNames();
  }
};

HbaseClient.prototype.send_getTableNames = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableNames', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getTableNames_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNames failed: unknown result');
};
HbaseClient.prototype.getColumnDescriptors = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getColumnDescriptors(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getColumnDescriptors(tableName);
  }
};

HbaseClient.prototype.send_getColumnDescriptors = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getColumnDescriptors', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getColumnDescriptors_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getColumnDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getColumnDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumnDescriptors failed: unknown result');
};
HbaseClient.prototype.getTableRegions = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTableRegions(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTableRegions(tableName);
  }
};

HbaseClient.prototype.send_getTableRegions = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableRegions', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getTableRegions_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableRegions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableRegions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableRegions failed: unknown result');
};
HbaseClient.prototype.createTable = function(tableName, columnFamilies, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createTable(tableName, columnFamilies);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createTable(tableName, columnFamilies);
  }
};

HbaseClient.prototype.send_createTable = function(tableName, columnFamilies) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_createTable_args();
  args.tableName = tableName;
  args.columnFamilies = columnFamilies;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.exist) {
    return callback(result.exist);
  }
  callback(null)
};
HbaseClient.prototype.deleteTable = function(tableName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteTable(tableName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteTable(tableName);
  }
};

HbaseClient.prototype.send_deleteTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_deleteTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.get = function(tableName, row, column, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get(tableName, row, column, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get(tableName, row, column, attributes);
  }
};

HbaseClient.prototype.send_get = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_get_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
HbaseClient.prototype.getVer = function(tableName, row, column, numVersions, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getVer(tableName, row, column, numVersions, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getVer(tableName, row, column, numVersions, attributes);
  }
};

HbaseClient.prototype.send_getVer = function(tableName, row, column, numVersions, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVer', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getVer_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.numVersions = numVersions;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVer failed: unknown result');
};
HbaseClient.prototype.getVerTs = function(tableName, row, column, timestamp, numVersions, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getVerTs(tableName, row, column, timestamp, numVersions, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getVerTs(tableName, row, column, timestamp, numVersions, attributes);
  }
};

HbaseClient.prototype.send_getVerTs = function(tableName, row, column, timestamp, numVersions, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVerTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getVerTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.numVersions = numVersions;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVerTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVerTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVerTs failed: unknown result');
};
HbaseClient.prototype.getRow = function(tableName, row, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRow(tableName, row, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRow(tableName, row, attributes);
  }
};

HbaseClient.prototype.send_getRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRow_args();
  args.tableName = tableName;
  args.row = row;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};
HbaseClient.prototype.getRowWithColumns = function(tableName, row, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowWithColumns(tableName, row, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowWithColumns(tableName, row, columns, attributes);
  }
};

HbaseClient.prototype.send_getRowWithColumns = function(tableName, row, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumns', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowWithColumns_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowTs = function(tableName, row, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowTs(tableName, row, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowTs(tableName, row, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowTs failed: unknown result');
};
HbaseClient.prototype.getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowWithColumnsTs(tableName, row, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowWithColumnsTs(tableName, row, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumnsTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowWithColumnsTs_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.getRows = function(tableName, rows, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRows(tableName, rows, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRows(tableName, rows, attributes);
  }
};

HbaseClient.prototype.send_getRows = function(tableName, rows, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRows', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRows_args();
  args.tableName = tableName;
  args.rows = rows;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRows failed: unknown result');
};
HbaseClient.prototype.getRowsWithColumns = function(tableName, rows, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowsWithColumns(tableName, rows, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowsWithColumns(tableName, rows, columns, attributes);
  }
};

HbaseClient.prototype.send_getRowsWithColumns = function(tableName, rows, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsWithColumns', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowsWithColumns_args();
  args.tableName = tableName;
  args.rows = rows;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowsTs = function(tableName, rows, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowsTs(tableName, rows, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowsTs(tableName, rows, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowsTs = function(tableName, rows, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowsTs_args();
  args.tableName = tableName;
  args.rows = rows;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsTs failed: unknown result');
};
HbaseClient.prototype.getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsWithColumnsTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.tableName = tableName;
  args.rows = rows;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.mutateRow = function(tableName, row, mutations, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRow(tableName, row, mutations, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRow(tableName, row, mutations, attributes);
  }
};

HbaseClient.prototype.send_mutateRow = function(tableName, row, mutations, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_mutateRow_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowTs = function(tableName, row, mutations, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRowTs(tableName, row, mutations, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRowTs(tableName, row, mutations, timestamp, attributes);
  }
};

HbaseClient.prototype.send_mutateRowTs = function(tableName, row, mutations, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_mutateRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRows = function(tableName, rowBatches, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRows(tableName, rowBatches, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRows(tableName, rowBatches, attributes);
  }
};

HbaseClient.prototype.send_mutateRows = function(tableName, rowBatches, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRows', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_mutateRows_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowsTs = function(tableName, rowBatches, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutateRowsTs(tableName, rowBatches, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutateRowsTs(tableName, rowBatches, timestamp, attributes);
  }
};

HbaseClient.prototype.send_mutateRowsTs = function(tableName, rowBatches, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowsTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_mutateRowsTs_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.atomicIncrement = function(tableName, row, column, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_atomicIncrement(tableName, row, column, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_atomicIncrement(tableName, row, column, value);
  }
};

HbaseClient.prototype.send_atomicIncrement = function(tableName, row, column, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('atomicIncrement', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_atomicIncrement_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_atomicIncrement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_atomicIncrement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('atomicIncrement failed: unknown result');
};
HbaseClient.prototype.deleteAll = function(tableName, row, column, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAll(tableName, row, column, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAll(tableName, row, column, attributes);
  }
};

HbaseClient.prototype.send_deleteAll = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_deleteAll_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllTs = function(tableName, row, column, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllTs(tableName, row, column, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllTs(tableName, row, column, timestamp, attributes);
  }
};

HbaseClient.prototype.send_deleteAllTs = function(tableName, row, column, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_deleteAllTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRow = function(tableName, row, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllRow(tableName, row, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllRow(tableName, row, attributes);
  }
};

HbaseClient.prototype.send_deleteAllRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRow', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_deleteAllRow_args();
  args.tableName = tableName;
  args.row = row;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.increment = function(increment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_increment(increment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_increment(increment);
  }
};

HbaseClient.prototype.send_increment = function(increment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_increment_args();
  args.increment = increment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.incrementRows = function(increments, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_incrementRows(increments);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_incrementRows(increments);
  }
};

HbaseClient.prototype.send_incrementRows = function(increments) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('incrementRows', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_incrementRows_args();
  args.increments = increments;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_incrementRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_incrementRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRowTs = function(tableName, row, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAllRowTs(tableName, row, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAllRowTs(tableName, row, timestamp, attributes);
  }
};

HbaseClient.prototype.send_deleteAllRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRowTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_deleteAllRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.scannerOpenWithScan = function(tableName, scan, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithScan(tableName, scan, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithScan(tableName, scan, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithScan = function(tableName, scan, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithScan', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerOpenWithScan_args();
  args.tableName = tableName;
  args.scan = scan;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithScan failed: unknown result');
};
HbaseClient.prototype.scannerOpen = function(tableName, startRow, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpen(tableName, startRow, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpen(tableName, startRow, columns, attributes);
  }
};

HbaseClient.prototype.send_scannerOpen = function(tableName, startRow, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpen', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerOpen_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpen = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpen_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpen failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStop', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerOpenWithStop_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStop failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithPrefix', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.tableName = tableName;
  args.startAndPrefix = startAndPrefix;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithPrefix = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithPrefix_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithPrefix failed: unknown result');
};
HbaseClient.prototype.scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenTs(tableName, startRow, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenTs(tableName, startRow, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerOpenTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenTs failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes);
  }
};

HbaseClient.prototype.send_scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStopTs', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStopTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStopTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStopTs failed: unknown result');
};
HbaseClient.prototype.scannerGet = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerGet(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerGet(id);
  }
};

HbaseClient.prototype.send_scannerGet = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGet', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerGet_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGet failed: unknown result');
};
HbaseClient.prototype.scannerGetList = function(id, nbRows, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerGetList(id, nbRows);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerGetList(id, nbRows);
  }
};

HbaseClient.prototype.send_scannerGetList = function(id, nbRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGetList', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerGetList_args();
  args.id = id;
  args.nbRows = nbRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGetList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGetList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGetList failed: unknown result');
};
HbaseClient.prototype.scannerClose = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scannerClose(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scannerClose(id);
  }
};

HbaseClient.prototype.send_scannerClose = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerClose', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_scannerClose_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerClose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerClose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.getRowOrBefore = function(tableName, row, family, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRowOrBefore(tableName, row, family);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRowOrBefore(tableName, row, family);
  }
};

HbaseClient.prototype.send_getRowOrBefore = function(tableName, row, family) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowOrBefore', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRowOrBefore_args();
  args.tableName = tableName;
  args.row = row;
  args.family = family;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowOrBefore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowOrBefore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowOrBefore failed: unknown result');
};
HbaseClient.prototype.getRegionInfo = function(row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRegionInfo(row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRegionInfo(row);
  }
};

HbaseClient.prototype.send_getRegionInfo = function(row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegionInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_getRegionInfo_args();
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRegionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRegionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegionInfo failed: unknown result');
};
HbaseClient.prototype.append = function(append, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_append(append);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_append(append);
  }
};

HbaseClient.prototype.send_append = function(append) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('append', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_append_args();
  args.append = append;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_append = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_append_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('append failed: unknown result');
};
HbaseClient.prototype.checkAndPut = function(tableName, row, column, value, mput, attributes, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_checkAndPut(tableName, row, column, value, mput, attributes);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_checkAndPut(tableName, row, column, value, mput, attributes);
  }
};

HbaseClient.prototype.send_checkAndPut = function(tableName, row, column, value, mput, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('checkAndPut', Thrift.MessageType.CALL, this.seqid());
  var args = new Hbase_checkAndPut_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.value = value;
  args.mput = mput;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_checkAndPut = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_checkAndPut_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('checkAndPut failed: unknown result');
};
HbaseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
HbaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

HbaseProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new Hbase_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableTable.length === 1) {
    Q.fcall(this._handler.enableTable, args.tableName)
      .then(function(result) {
        var result = new Hbase_enableTable_result({success: result});
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_enableTable_result(err);
        output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.enableTable(args.tableName,  function (err, result) {
      var result = new Hbase_enableTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new Hbase_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disableTable.length === 1) {
    Q.fcall(this._handler.disableTable, args.tableName)
      .then(function(result) {
        var result = new Hbase_disableTable_result({success: result});
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_disableTable_result(err);
        output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disableTable(args.tableName,  function (err, result) {
      var result = new Hbase_disableTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new Hbase_isTableEnabled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isTableEnabled.length === 1) {
    Q.fcall(this._handler.isTableEnabled, args.tableName)
      .then(function(result) {
        var result = new Hbase_isTableEnabled_result({success: result});
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_isTableEnabled_result(err);
        output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isTableEnabled(args.tableName,  function (err, result) {
      var result = new Hbase_isTableEnabled_result((err != null ? err : {success: result}));
      output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new Hbase_compact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compact.length === 1) {
    Q.fcall(this._handler.compact, args.tableNameOrRegionName)
      .then(function(result) {
        var result = new Hbase_compact_result({success: result});
        output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_compact_result(err);
        output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.compact(args.tableNameOrRegionName,  function (err, result) {
      var result = new Hbase_compact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_majorCompact = function(seqid, input, output) {
  var args = new Hbase_majorCompact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.majorCompact.length === 1) {
    Q.fcall(this._handler.majorCompact, args.tableNameOrRegionName)
      .then(function(result) {
        var result = new Hbase_majorCompact_result({success: result});
        output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_majorCompact_result(err);
        output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.majorCompact(args.tableNameOrRegionName,  function (err, result) {
      var result = new Hbase_majorCompact_result((err != null ? err : {success: result}));
      output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getTableNames = function(seqid, input, output) {
  var args = new Hbase_getTableNames_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableNames.length === 0) {
    Q.fcall(this._handler.getTableNames)
      .then(function(result) {
        var result = new Hbase_getTableNames_result({success: result});
        output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getTableNames_result(err);
        output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableNames( function (err, result) {
      var result = new Hbase_getTableNames_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getColumnDescriptors = function(seqid, input, output) {
  var args = new Hbase_getColumnDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getColumnDescriptors.length === 1) {
    Q.fcall(this._handler.getColumnDescriptors, args.tableName)
      .then(function(result) {
        var result = new Hbase_getColumnDescriptors_result({success: result});
        output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getColumnDescriptors_result(err);
        output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getColumnDescriptors(args.tableName,  function (err, result) {
      var result = new Hbase_getColumnDescriptors_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getTableRegions = function(seqid, input, output) {
  var args = new Hbase_getTableRegions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTableRegions.length === 1) {
    Q.fcall(this._handler.getTableRegions, args.tableName)
      .then(function(result) {
        var result = new Hbase_getTableRegions_result({success: result});
        output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getTableRegions_result(err);
        output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTableRegions(args.tableName,  function (err, result) {
      var result = new Hbase_getTableRegions_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new Hbase_createTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createTable.length === 2) {
    Q.fcall(this._handler.createTable, args.tableName, args.columnFamilies)
      .then(function(result) {
        var result = new Hbase_createTable_result({success: result});
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_createTable_result(err);
        output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createTable(args.tableName, args.columnFamilies,  function (err, result) {
      var result = new Hbase_createTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new Hbase_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteTable.length === 1) {
    Q.fcall(this._handler.deleteTable, args.tableName)
      .then(function(result) {
        var result = new Hbase_deleteTable_result({success: result});
        output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_deleteTable_result(err);
        output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteTable(args.tableName,  function (err, result) {
      var result = new Hbase_deleteTable_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Hbase_get_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get.length === 4) {
    Q.fcall(this._handler.get, args.tableName, args.row, args.column, args.attributes)
      .then(function(result) {
        var result = new Hbase_get_result({success: result});
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_get_result(err);
        output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get(args.tableName, args.row, args.column, args.attributes,  function (err, result) {
      var result = new Hbase_get_result((err != null ? err : {success: result}));
      output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getVer = function(seqid, input, output) {
  var args = new Hbase_getVer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getVer.length === 5) {
    Q.fcall(this._handler.getVer, args.tableName, args.row, args.column, args.numVersions, args.attributes)
      .then(function(result) {
        var result = new Hbase_getVer_result({success: result});
        output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getVer_result(err);
        output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getVer(args.tableName, args.row, args.column, args.numVersions, args.attributes,  function (err, result) {
      var result = new Hbase_getVer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getVerTs = function(seqid, input, output) {
  var args = new Hbase_getVerTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getVerTs.length === 6) {
    Q.fcall(this._handler.getVerTs, args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes)
      .then(function(result) {
        var result = new Hbase_getVerTs_result({success: result});
        output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getVerTs_result(err);
        output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes,  function (err, result) {
      var result = new Hbase_getVerTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Hbase_getRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRow.length === 3) {
    Q.fcall(this._handler.getRow, args.tableName, args.row, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRow_result({success: result});
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRow_result(err);
        output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRow(args.tableName, args.row, args.attributes,  function (err, result) {
      var result = new Hbase_getRow_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowWithColumns.length === 4) {
    Q.fcall(this._handler.getRowWithColumns, args.tableName, args.row, args.columns, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRowWithColumns_result({success: result});
        output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowWithColumns_result(err);
        output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowWithColumns(args.tableName, args.row, args.columns, args.attributes,  function (err, result) {
      var result = new Hbase_getRowWithColumns_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowTs = function(seqid, input, output) {
  var args = new Hbase_getRowTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowTs.length === 4) {
    Q.fcall(this._handler.getRowTs, args.tableName, args.row, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRowTs_result({success: result});
        output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowTs_result(err);
        output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowTs(args.tableName, args.row, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_getRowTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowWithColumnsTs.length === 5) {
    Q.fcall(this._handler.getRowWithColumnsTs, args.tableName, args.row, args.columns, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRowWithColumnsTs_result({success: result});
        output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowWithColumnsTs_result(err);
        output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_getRowWithColumnsTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRows = function(seqid, input, output) {
  var args = new Hbase_getRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRows.length === 3) {
    Q.fcall(this._handler.getRows, args.tableName, args.rows, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRows_result({success: result});
        output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRows_result(err);
        output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRows(args.tableName, args.rows, args.attributes,  function (err, result) {
      var result = new Hbase_getRows_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowsWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowsWithColumns.length === 4) {
    Q.fcall(this._handler.getRowsWithColumns, args.tableName, args.rows, args.columns, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRowsWithColumns_result({success: result});
        output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowsWithColumns_result(err);
        output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowsWithColumns(args.tableName, args.rows, args.columns, args.attributes,  function (err, result) {
      var result = new Hbase_getRowsWithColumns_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowsTs.length === 4) {
    Q.fcall(this._handler.getRowsTs, args.tableName, args.rows, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRowsTs_result({success: result});
        output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowsTs_result(err);
        output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowsTs(args.tableName, args.rows, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_getRowsTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowsWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowsWithColumnsTs.length === 5) {
    Q.fcall(this._handler.getRowsWithColumnsTs, args.tableName, args.rows, args.columns, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_getRowsWithColumnsTs_result({success: result});
        output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowsWithColumnsTs_result(err);
        output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowsWithColumnsTs(args.tableName, args.rows, args.columns, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_getRowsWithColumnsTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new Hbase_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRow.length === 4) {
    Q.fcall(this._handler.mutateRow, args.tableName, args.row, args.mutations, args.attributes)
      .then(function(result) {
        var result = new Hbase_mutateRow_result({success: result});
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_mutateRow_result(err);
        output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutateRow(args.tableName, args.row, args.mutations, args.attributes,  function (err, result) {
      var result = new Hbase_mutateRow_result((err != null ? err : {success: result}));
      output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_mutateRowTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRowTs.length === 5) {
    Q.fcall(this._handler.mutateRowTs, args.tableName, args.row, args.mutations, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_mutateRowTs_result({success: result});
        output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_mutateRowTs_result(err);
        output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_mutateRowTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_mutateRows = function(seqid, input, output) {
  var args = new Hbase_mutateRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRows.length === 3) {
    Q.fcall(this._handler.mutateRows, args.tableName, args.rowBatches, args.attributes)
      .then(function(result) {
        var result = new Hbase_mutateRows_result({success: result});
        output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_mutateRows_result(err);
        output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutateRows(args.tableName, args.rowBatches, args.attributes,  function (err, result) {
      var result = new Hbase_mutateRows_result((err != null ? err : {success: result}));
      output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_mutateRowsTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutateRowsTs.length === 4) {
    Q.fcall(this._handler.mutateRowsTs, args.tableName, args.rowBatches, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_mutateRowsTs_result({success: result});
        output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_mutateRowsTs_result(err);
        output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_mutateRowsTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_atomicIncrement = function(seqid, input, output) {
  var args = new Hbase_atomicIncrement_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.atomicIncrement.length === 4) {
    Q.fcall(this._handler.atomicIncrement, args.tableName, args.row, args.column, args.value)
      .then(function(result) {
        var result = new Hbase_atomicIncrement_result({success: result});
        output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_atomicIncrement_result(err);
        output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.atomicIncrement(args.tableName, args.row, args.column, args.value,  function (err, result) {
      var result = new Hbase_atomicIncrement_result((err != null ? err : {success: result}));
      output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new Hbase_deleteAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAll.length === 4) {
    Q.fcall(this._handler.deleteAll, args.tableName, args.row, args.column, args.attributes)
      .then(function(result) {
        var result = new Hbase_deleteAll_result({success: result});
        output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_deleteAll_result(err);
        output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAll(args.tableName, args.row, args.column, args.attributes,  function (err, result) {
      var result = new Hbase_deleteAll_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_deleteAllTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllTs.length === 5) {
    Q.fcall(this._handler.deleteAllTs, args.tableName, args.row, args.column, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_deleteAllTs_result({success: result});
        output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_deleteAllTs_result(err);
        output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_deleteAllTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_deleteAllRow = function(seqid, input, output) {
  var args = new Hbase_deleteAllRow_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllRow.length === 3) {
    Q.fcall(this._handler.deleteAllRow, args.tableName, args.row, args.attributes)
      .then(function(result) {
        var result = new Hbase_deleteAllRow_result({success: result});
        output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_deleteAllRow_result(err);
        output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAllRow(args.tableName, args.row, args.attributes,  function (err, result) {
      var result = new Hbase_deleteAllRow_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new Hbase_increment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.increment.length === 1) {
    Q.fcall(this._handler.increment, args.increment)
      .then(function(result) {
        var result = new Hbase_increment_result({success: result});
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_increment_result(err);
        output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.increment(args.increment,  function (err, result) {
      var result = new Hbase_increment_result((err != null ? err : {success: result}));
      output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_incrementRows = function(seqid, input, output) {
  var args = new Hbase_incrementRows_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.incrementRows.length === 1) {
    Q.fcall(this._handler.incrementRows, args.increments)
      .then(function(result) {
        var result = new Hbase_incrementRows_result({success: result});
        output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_incrementRows_result(err);
        output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.incrementRows(args.increments,  function (err, result) {
      var result = new Hbase_incrementRows_result((err != null ? err : {success: result}));
      output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_deleteAllRowTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllRowTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAllRowTs.length === 4) {
    Q.fcall(this._handler.deleteAllRowTs, args.tableName, args.row, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_deleteAllRowTs_result({success: result});
        output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_deleteAllRowTs_result(err);
        output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAllRowTs(args.tableName, args.row, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_deleteAllRowTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerOpenWithScan = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithScan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithScan.length === 3) {
    Q.fcall(this._handler.scannerOpenWithScan, args.tableName, args.scan, args.attributes)
      .then(function(result) {
        var result = new Hbase_scannerOpenWithScan_result({success: result});
        output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerOpenWithScan_result(err);
        output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerOpenWithScan(args.tableName, args.scan, args.attributes,  function (err, result) {
      var result = new Hbase_scannerOpenWithScan_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerOpen = function(seqid, input, output) {
  var args = new Hbase_scannerOpen_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpen.length === 4) {
    Q.fcall(this._handler.scannerOpen, args.tableName, args.startRow, args.columns, args.attributes)
      .then(function(result) {
        var result = new Hbase_scannerOpen_result({success: result});
        output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerOpen_result(err);
        output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerOpen(args.tableName, args.startRow, args.columns, args.attributes,  function (err, result) {
      var result = new Hbase_scannerOpen_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerOpenWithStop = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithStop.length === 5) {
    Q.fcall(this._handler.scannerOpenWithStop, args.tableName, args.startRow, args.stopRow, args.columns, args.attributes)
      .then(function(result) {
        var result = new Hbase_scannerOpenWithStop_result({success: result});
        output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerOpenWithStop_result(err);
        output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, args.attributes,  function (err, result) {
      var result = new Hbase_scannerOpenWithStop_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerOpenWithPrefix = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithPrefix.length === 4) {
    Q.fcall(this._handler.scannerOpenWithPrefix, args.tableName, args.startAndPrefix, args.columns, args.attributes)
      .then(function(result) {
        var result = new Hbase_scannerOpenWithPrefix_result({success: result});
        output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerOpenWithPrefix_result(err);
        output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, args.attributes,  function (err, result) {
      var result = new Hbase_scannerOpenWithPrefix_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerOpenTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenTs.length === 5) {
    Q.fcall(this._handler.scannerOpenTs, args.tableName, args.startRow, args.columns, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_scannerOpenTs_result({success: result});
        output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerOpenTs_result(err);
        output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_scannerOpenTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerOpenWithStopTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerOpenWithStopTs.length === 6) {
    Q.fcall(this._handler.scannerOpenWithStopTs, args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes)
      .then(function(result) {
        var result = new Hbase_scannerOpenWithStopTs_result({success: result});
        output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerOpenWithStopTs_result(err);
        output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes,  function (err, result) {
      var result = new Hbase_scannerOpenWithStopTs_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerGet = function(seqid, input, output) {
  var args = new Hbase_scannerGet_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerGet.length === 1) {
    Q.fcall(this._handler.scannerGet, args.id)
      .then(function(result) {
        var result = new Hbase_scannerGet_result({success: result});
        output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerGet_result(err);
        output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerGet(args.id,  function (err, result) {
      var result = new Hbase_scannerGet_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerGetList = function(seqid, input, output) {
  var args = new Hbase_scannerGetList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerGetList.length === 2) {
    Q.fcall(this._handler.scannerGetList, args.id, args.nbRows)
      .then(function(result) {
        var result = new Hbase_scannerGetList_result({success: result});
        output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerGetList_result(err);
        output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerGetList(args.id, args.nbRows,  function (err, result) {
      var result = new Hbase_scannerGetList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_scannerClose = function(seqid, input, output) {
  var args = new Hbase_scannerClose_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scannerClose.length === 1) {
    Q.fcall(this._handler.scannerClose, args.id)
      .then(function(result) {
        var result = new Hbase_scannerClose_result({success: result});
        output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_scannerClose_result(err);
        output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scannerClose(args.id,  function (err, result) {
      var result = new Hbase_scannerClose_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRowOrBefore = function(seqid, input, output) {
  var args = new Hbase_getRowOrBefore_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRowOrBefore.length === 3) {
    Q.fcall(this._handler.getRowOrBefore, args.tableName, args.row, args.family)
      .then(function(result) {
        var result = new Hbase_getRowOrBefore_result({success: result});
        output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRowOrBefore_result(err);
        output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRowOrBefore(args.tableName, args.row, args.family,  function (err, result) {
      var result = new Hbase_getRowOrBefore_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_getRegionInfo = function(seqid, input, output) {
  var args = new Hbase_getRegionInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRegionInfo.length === 1) {
    Q.fcall(this._handler.getRegionInfo, args.row)
      .then(function(result) {
        var result = new Hbase_getRegionInfo_result({success: result});
        output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_getRegionInfo_result(err);
        output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRegionInfo(args.row,  function (err, result) {
      var result = new Hbase_getRegionInfo_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_append = function(seqid, input, output) {
  var args = new Hbase_append_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.append.length === 1) {
    Q.fcall(this._handler.append, args.append)
      .then(function(result) {
        var result = new Hbase_append_result({success: result});
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_append_result(err);
        output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.append(args.append,  function (err, result) {
      var result = new Hbase_append_result((err != null ? err : {success: result}));
      output.writeMessageBegin("append", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HbaseProcessor.prototype.process_checkAndPut = function(seqid, input, output) {
  var args = new Hbase_checkAndPut_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.checkAndPut.length === 6) {
    Q.fcall(this._handler.checkAndPut, args.tableName, args.row, args.column, args.value, args.mput, args.attributes)
      .then(function(result) {
        var result = new Hbase_checkAndPut_result({success: result});
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Hbase_checkAndPut_result(err);
        output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.checkAndPut(args.tableName, args.row, args.column, args.value, args.mput, args.attributes,  function (err, result) {
      var result = new Hbase_checkAndPut_result((err != null ? err : {success: result}));
      output.writeMessageBegin("checkAndPut", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

